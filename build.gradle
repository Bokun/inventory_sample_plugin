import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain

buildscript {
    ext {
        awsVersion = '1.11.455'
    }
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("com.amazonaws:aws-java-sdk-core:${awsVersion}")
        classpath("com.amazonaws:aws-java-sdk-s3:${awsVersion}")
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath('jp.classmethod.aws:gradle-aws-plugin:0.32'){
            exclude group:'jp.xet.spar-wings', module:'spar-wings-awscli-config'
        }
    }
}

apply plugin: "java"
apply plugin: "application"
apply plugin: "idea"
apply plugin: 'docker'
apply plugin: 'jp.classmethod.aws'

group = 'bokun'
//version '0.3.4'         // should match the one in API and inventory service

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// This thingie below will ensure all dependencies are always fetched when running from IntelliJ
// It should not be there by default and only uncommented when necessary, followed by IntelliJ Gradle refresh

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'hours'
    resolutionStrategy.cacheChangingModulesFor 0, 'hours'
}

mainClassName="io.bokun.inventory.plugin.sample.Main"

def buildNumber = 'DEV'
if (project.hasProperty('buildNo')) {
    buildNumber = buildNo
}

def jsonName = "${jar.baseName}-${buildNumber}.json"
def dockerName = "${group}/${jar.baseName}:${buildNumber}"
def jarName = "${jar.baseName}.jar"

AWSCredentials awsCredentials = DefaultAWSCredentialsProviderChain.getInstance().credentials;

repositories {
    maven {
        url "http://public-pmr.bokun.io.s3-website-eu-west-1.amazonaws.com/snapshots"
    }
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "http://public-pmr.bokun.io.s3-website-eu-west-1.amazonaws.com/release"
    }
}

dependencies {
    compile group: 'com.google.code.findbugs', name: 'jsr305', version:'3.0.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.7.25'
    compile group: 'com.google.guava', name: 'guava', version:'27.1-jre'
    compile 'io.grpc:grpc-all:1.11.0'
    compile 'io.bokun.inventory:common-api:0.4.2'
    compile 'io.bokun.inventory:plugin-api:0.4.2'
    compile group: 'com.squareup.okhttp', name: 'okhttp', version: '2.7.5'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    compile 'com.google.inject:guice:4.2.2'
    compile 'io.netty:netty-tcnative-boringssl-static:2.0.1.Final'
    compile 'io.undertow:undertow-core:2.0.19.Final'

    testCompile group: 'junit', name: 'junit', version:'4.12'
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java");
        sourceDirs += file("${projectDir}/src/generated/main/grpc");
    }
}

mainClassName="io.bokun.inventory.plugin.sample.Main"

startScripts.enabled = false

task sourceJava(type: Jar) {
    from sourceSets.main.allJava
}

jar {
    from {
        (configurations.runtime).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'io.bokun.inventory.plugin.sample.Main'
    }
}

task createJsonAWS(type: Copy, dependsOn: clean) {
    println "createJsonAWS"

    from "src/main/docker/aws.json"
    into "build/bundle"
    expand(dockerName: dockerName)
    rename { String fileName ->
        fileName.replace("aws.json", jsonName)
    }
}

task buildDocker(type: Docker, dependsOn: [build]) {
    push = false
    applicationName = jar.baseName
    tagVersion = buildNumber
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        println("libs = ${project.buildDir}/libs")
        println("jar = ${jar.baseName}")
        println("${project.name}-${version}.jar")
        println(jarName)
        copy {
            println("copy jar")
            println("jar = ${jarName}")
            from "${project.buildDir}/libs"
            into stageDir
            include "${jarName}"
        }
    }
}
